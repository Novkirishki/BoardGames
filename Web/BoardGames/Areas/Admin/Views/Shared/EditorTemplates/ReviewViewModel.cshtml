@using Kendo.Mvc.UI
@model BoardGames.Areas.Admin.Models.ReviewViewModel

@Html.ValidationSummary(true, "", new { @class = "text-danger" })
@Html.HiddenFor(model => model.Id)
@Html.HiddenFor(model => model.ImageId)

<div class="form-group">
    @Html.LabelFor(model => model.GameTitle, "Game Title", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.GameTitle, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.GameTitle, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.CategoryId, "Category", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @(Html.Kendo().DropDownList()
            .Name("CategoryId")
            .DataValueField("Id")
            .DataTextField("Name")
            .BindTo((System.Collections.IEnumerable)ViewData["categories"])
        )
        @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Content, "Content", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.Kendo().EditorFor(model => model.Content).Name("Content")
        @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.MinPlayers, "Minimum number of players", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.MinPlayers, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.MinPlayers, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.MaxPlayers, "Maximum number of players", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.MaxPlayers, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.MaxPlayers, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.MinAgeRequired, "Min age required", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.MinAgeRequired, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.MinAgeRequired, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.MinPlayingTimeInMinutes, "Minimum playing time", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.MinPlayingTimeInMinutes, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.MinPlayingTimeInMinutes, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.UrlToOfficialSite, "Official site", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.UrlToOfficialSite, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.UrlToOfficialSite, "", new { @class = "text-danger" })
    </div>
</div>

<script>
    function onSuccess(e) {
        $('#ImageId').val(e.response.imageId).trigger("change");
    }
</script>

<div class="form-group">
    @Html.Label("Image", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.Kendo().Upload().Name("upload").Multiple(false).Async(async => async.Save("Upload", "Files", new { area = string.Empty })).Events(c => c.Success("onSuccess"))
    </div>
</div>