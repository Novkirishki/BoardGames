@using Kendo.Mvc.UI
@model BoardGames.Areas.Admin.Models.TutorialViewModel

@Html.ValidationSummary(true, "", new { @class = "text-danger" })
@Html.HiddenFor(model => model.Id)
@Html.HiddenFor(model => model.ImageId)

<div class="form-group">
    @Html.LabelFor(model => model.Title, "Title", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Game, "Game title", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.Game, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Game, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Content, "Content", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.Content, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
    </div>
</div>

<script>
    function onSuccess(e) {
        $('#ImageId').val(e.response.imageId).trigger("change");
    }
</script>

<div class="form-group">
    @Html.Label("Image", htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.Kendo().Upload().Name("upload").Multiple(false).Async(async => async.Save("Upload", "Files", new { area = string.Empty})).Events(c => c.Success("onSuccess"))
    </div>
</div>